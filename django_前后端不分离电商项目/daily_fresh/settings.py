"""
Django settings for daily_fresh project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 通过设置默认的包/模块的搜寻路径,添加路径apps所在的路径 需要导入 import sys
import sys
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!2@@_%qw+k^zl!i5kqdg4h5$q%2@kv$6_ecxzj0idfdxc0&y$k'

# SECURITY WARNING: don't run with debug turned on in production!
# False 可以自定显示错误的内容,原生错误内容不应给到用户体验,开发阶段设置为True
DEBUG = False
# 可以用列表内的域名访问到本机,
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',  # 注册haystack, 全文检索框架
    'tinymce',  # 添加富文本应用, 在虚拟环境下  pip install django-tinymce==2.6.0
    'cart',  # 注册应用,这里会提示有错误,因为已经添加了路径,所以不用管
    'goods',
    'order',
    'user',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'daily_fresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # 注册模板路径
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'daily_fresh.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases
# 指定数据库
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'daily_fresh',
        'USER': 'root',
        'PASSWORD': 'mysql',
        'HOST': 'localhost',
        'PORT': 3306,
    }
}

# 指定Django认证系统user模型类,使用自定义模型
AUTH_USER_MODEL = "user.User"

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/
# 本地化设置
LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/
# 静态文件路径
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
# 指定收集静态文件的路径,终端命令收集到程序的静态文件后,再去配置nginx服务器寻找静态文件的路径
STATIC_ROOT = '/var/www/daily_fresh/static'

# 添加富文本编辑器设置
TINYMCE_DEFAULT_CONFIG = {
    'theme': 'advanced',
    'width': 600,
    'height': 400,
}

# 以下设置 用来设置django发送邮件功能
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# 制定发送邮件的服务器
EMAIL_HOST = 'smtp.163.com'
# 发送邮件服务的端口
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = 'lowmanisbusy@163.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'lowman7257'
# 收件人看到的发件人
EMAIL_FROM = 'TTSX<lowmanisbusy@163.com>'

# 设置django缓存存放位置为redis,并设置一个默认(default)选项,在redis中(配置文件/etc/redis/redis.conf)开启了RDB持久化储存
# pip install django-redis, 然后在视图中可以通过 from django_redis import get_redis_connection 这个方法和redis数据库进行连接
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        # redis服务器的ip地址及端口号,及数据库序号,redis一共有15个数据库 0~15
        "LOCATION": "redis://127.0.0.1:6379/6",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# 使用django认知系统的登录状态装饰器时,没有登录的话,跳往登录页面后路径是/acount/login 需要重新指定
LOGIN_URL = '/user/login'

# 设置允许保存session
SESSION_SAVE_EVERY_REQUEST = True
# 设置session存放在缓存中
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
# 使用默认选项的缓存设置存放session
SESSION_CACHE_ALIAS = "default"
# 设置session过期时间,关闭浏览器时session过期(cookies) 和设置固定时间后过期 只能二选一
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# 30分钟后session过期, 只能和关闭时浏览器失效 二选一
# SESSION_COOKIE_AGE=5*60

# 指定django系统文件的存储类, 在django中存在着一套默认的可以将文件保存在django服务器上的存储文件的操作,
# 如果要将文件存储在其他服务器上,则需要自定义一个文件存储类,并且在settings中进行指定
DEFAULT_FILE_STORAGE = 'utils.fdfs.storage.FDFSStorage'

# 指定fdfs客户端配置文件的路径, 通过配置这个文件的参数可以实现django和track-server通信
# 这个配置文件中需要设置tracker-server的ip地址及端口号
FDFS_CLIENT_CONF = os.path.join(BASE_DIR, 'utils/fdfs/client.conf')

#  指定fdfs系统机器上的nginx的ip和port, 浏览器就是根据django服务器提供的nginx地址
#  与其通信,再由nginx与FastDFS进行通信,完成文件的存取,在html页面中已经定义了需要请求资源的nginx URL
FDFS_NGINX_URL = 'http://192.168.20.38:8888/'

# 配置全文检索框架的搜索引擎,及索引文件的路径, 设置一个默认值
HAYSTACK_CONNECTIONS = {
    'default': {
        # 使用whoosh引擎
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
        # 索引文件路径
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}

# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# 指定搜索结果每页的条数 这里设置成了1条
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 1
